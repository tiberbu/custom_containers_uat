name: Build Image

on:
  push:
    branches:
      - master
  repository_dispatch:
  workflow_dispatch:
    inputs:
      image:
        description: Image name
        type: string
      version:
        description: Image version tag
        type: string
      frappe-repo:
        description: Frappe repo
        type: string
      frappe-version:
        description: Frappe branch
        type: string
      py-version:
        description: Python version
        type: string
      nodejs-version:
        description: NodeJS version
        type: string
      apps-json-base64:
        description: base64 encoded string of apps.json
        type: string
      context:
        description: docker build context (ignored; we use local checkout of frappe_docker)
        type: string
        required: false
      dockerfile:
        description: dockerfile path (ignored; we use frappe_docker/images/custom/Containerfile)
        type: string
        required: false
      registry-user:
        description: user name
        required: false
        type: string

env:
  TOKEN: ${{ secrets.TOKEN }}
  IMAGE_NAME: ${{ inputs.image }}
  IMAGE_VERSION: ${{ inputs.version }}
  AWS_REGION: me-central-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.me-central-1.amazonaws.com

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean Git Cache
        run: git clean -ffdx && git reset --hard

      - name: Run Python Script to Update JSON
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: python ci/script.py

      # Load repo defaults (fallbacks). Inputs will still win in Buildx args.
      - name: Source Build Env
        run: |
          [ -f ./ci/build.env ] && cat ./ci/build.env >> $GITHUB_ENV
          [ -f ./ci/version.txt ] && echo "VERSION=$(cat ./ci/version.txt)" >> $GITHUB_ENV
          [ -f ./ci/apps.json ] && echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV

      # --- ECR auth & push ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          set -e
          # fallback if IMAGE_NAME is empty to avoid aws cli validation error
          IMAGE="${IMAGE_NAME:-my-app}"
          echo "Using IMAGE_NAME=$IMAGE"
          if ! aws ecr describe-repositories --repository-names "$IMAGE" --region "${AWS_REGION}" >/dev/null 2>&1; then
            aws ecr create-repository \
              --repository-name "$IMAGE" \
              --region "${AWS_REGION}" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
            echo "Created ECR repository: $IMAGE"
          else
            echo "ECR repository already exists: $IMAGE"
          fi
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$ECR_REGISTRY"

      # Use the same checkout of frappe_docker as your working workflow
      - name: Checkout frappe_docker (build context)
        uses: actions/checkout@v4
        with:
          repository: frappe/frappe_docker
          ref: main
          path: frappe_docker

      # Set up Buildx (no external QEMU action)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Verify Buildx
        run: |
          docker buildx ls || true
          docker buildx inspect --bootstrap || true

      - name: Build and push Docker image with Buildx (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./frappe_docker
          file: ./frappe_docker/images/custom/Containerfile
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: false
          build-args: |
            FRAPPE_PATH=${{ inputs['frappe-repo'] || env.FRAPPE_REPO }}
            FRAPPE_BRANCH=${{ inputs['frappe-version'] || env.FRAPPE_BRANCH }}
            PYTHON_VERSION=${{ inputs['py-version'] || env.PY_VERSION }}
            NODE_VERSION=${{ inputs['nodejs-version'] || env.NODE_VERSION }}
            APPS_JSON_BASE64=${{ inputs['apps-json-base64'] || env.APPS_JSON_BASE64 }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

      - name: Inspect pushed image manifest
        run: |
          IMAGE=${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          docker buildx imagetools inspect --raw "$IMAGE" > /tmp/manifest.json || true
          echo "Saved manifest to /tmp/manifest.json"
          if grep -q '"architecture": "amd64"' /tmp/manifest.json && grep -q '"architecture": "arm64"' /tmp/manifest.json; then
            echo "SUCCESS: manifest contains both amd64 and arm64"
          else
            echo "WARNING: manifest does not show both architectures (inspect output below)"
            cat /tmp/manifest.json || true
          fi
