name: Build Image (multi-arch)

on:
  push:
    branches:
      - master
  repository_dispatch:
  workflow_dispatch:
    inputs:
      image:
        description: Image name
        type: string
      version:
        description: Image version tag
        type: string
      frappe-repo:
        description: Frappe repo
        type: string
      frappe-version:
        description: Frappe branch
        type: string
      py-version:
        description: Python version
        type: string
      nodejs-version:
        description: NodeJS version
        type: string
      apps-json-base64:
        description: base64 encoded string of apps.json
        type: string
      context:
        description: kaniko/buildx context
        type: string
      dockerfile:
        description: dockerfile path from context
        type: string
      registry-user:
        description: user name
        required: false

env:
  TOKEN: ${{ secrets.TOKEN }}
  AWS_REGION: me-central-1
  # do not try to use env.AWS_REGION inside top-level env expressions to construct ECR - we construct it later

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean Git Cache
        run: git clean -ffdx && git reset --hard

      - name: Run Python Script to Update JSON
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: python ci/script.py

      - name: Source Build Env (fallbacks)
        run: |
          [ -f ./ci/build.env ] && cat ./ci/build.env >> $GITHUB_ENV
          [ -f ./ci/version.txt ] && echo "VERSION=$(cat ./ci/version.txt)" >> $GITHUB_ENV
          [ -f ./ci/apps.json ] && echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV

      # Prepare computed environment variables for later actions
      - name: Prepare image/env variables
        run: |
          echo "IMAGE_NAME=${{ github.event.inputs.image || env.IMAGE_NAME || 'my-app' }}" >> "$GITHUB_ENV"
          echo "IMAGE_TAG=${{ github.event.inputs.version || env.IMAGE_VERSION || 'latest' }}" >> "$GITHUB_ENV"
          echo "CONTEXT=${{ github.event.inputs.context || '.' }}" >> "$GITHUB_ENV"
          echo "DOCKERFILE=${{ github.event.inputs.dockerfile || 'Dockerfile' }}" >> "$GITHUB_ENV"
          # pass optional build args into env
          echo "FRAPPE_REPO=${{ github.event.inputs['frappe-repo'] || env.FRAPPE_REPO || '' }}" >> "$GITHUB_ENV"
          echo "FRAPPE_BRANCH=${{ github.event.inputs['frappe-version'] || env.FRAPPE_BRANCH || '' }}" >> "$GITHUB_ENV"
          echo "PY_VERSION=${{ github.event.inputs['py-version'] || env.PY_VERSION || '' }}" >> "$GITHUB_ENV"
          echo "NODE_VERSION=${{ github.event.inputs['nodejs-version'] || env.NODE_VERSION || '' }}" >> "$GITHUB_ENV"
          echo "APPS_JSON_BASE64=${{ github.event.inputs['apps-json-base64'] || env.APPS_JSON_BASE64 || '' }}" >> "$GITHUB_ENV"
          # Build ECR registry from secret + region (do this at runtime)
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> "$GITHUB_ENV"
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          set -e
          if ! aws ecr describe-repositories --repository-names "$IMAGE_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
            aws ecr create-repository \
              --repository-name "$IMAGE_NAME" \
              --region "$AWS_REGION" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
            echo "Created ECR repository: $IMAGE_NAME"
          else
            echo "ECR repository already exists: $IMAGE_NAME"
          fi

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}

      # Buildx: set up builder (install true will ensure QEMU is present on hosted runners)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build and push multi-arch image (amd64 + arm64)
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          build-args: |
            FRAPPE_PATH=${{ env.FRAPPE_REPO }}
            FRAPPE_BRANCH=${{ env.FRAPPE_BRANCH }}
            PYTHON_VERSION=${{ env.PY_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
            APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}

      - name: Verify manifest contains amd64 and arm64
        run: |
          IMAGE=${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker buildx imagetools inspect --raw "$IMAGE" > /tmp/manifest.json
          if grep -q '"architecture": "amd64"' /tmp/manifest.json && grep -q '"architecture": "arm64"' /tmp/manifest.json; then
            echo "OK: manifest contains amd64 & arm64"
          else
            echo "ERROR: manifest missing expected platforms"
            cat /tmp/manifest.json
            exit 1
          fi
