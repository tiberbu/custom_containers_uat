name: Build & Push Docker Image (amd64)

on:
  push:
    branches:
      - main   # or 'master' if your repo uses master
  workflow_dispatch:
    inputs:
      image:
        description: "Image name"
        type: string
        default: "my-app"
      version:
        description: "Image version tag"
        type: string
        default: "latest"
      frappe-repo:
        description: "Frappe repo"
        type: string
        default: ""
      frappe-version:
        description: "Frappe branch"
        type: string
        default: "version-15"
      py-version:
        description: "Python version"
        type: string
        default: "3.11.6"
      nodejs-version:
        description: "NodeJS version"
        type: string
        default: "18.17.0"
      apps-json-base64:
        description: "Base64 encoded apps.json"
        type: string
        default: ""
      context:
        description: "Docker build context"
        type: string
        default: "."
      dockerfile:
        description: "Dockerfile path"
        type: string
        default: "Dockerfile"

env:
  AWS_REGION: me-central-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.me-central-1.amazonaws.com

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Prepare environment variables from inputs
      - name: Set up environment variables
        run: |
          echo "IMAGE_NAME=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "CONTEXT_PATH=${{ github.event.inputs.context }}" >> $GITHUB_ENV
          echo "DOCKERFILE_PATH=${{ github.event.inputs.dockerfile }}" >> $GITHUB_ENV
          echo "FRAPPE_REPO=${{ github.event.inputs.frappe-repo }}" >> $GITHUB_ENV
          echo "FRAPPE_BRANCH=${{ github.event.inputs.frappe-version }}" >> $GITHUB_ENV
          echo "PYTHON_VERSION=${{ github.event.inputs.py-version }}" >> $GITHUB_ENV
          echo "NODE_VERSION=${{ github.event.inputs.nodejs-version }}" >> $GITHUB_ENV
          echo "APPS_JSON_BASE64=${{ github.event.inputs.apps-json-base64 }}" >> $GITHUB_ENV

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Ensure the ECR repository exists
      - name: Ensure ECR repository exists
        run: |
          set -e
          if ! aws ecr describe-repositories --repository-names "$IMAGE_NAME" >/dev/null 2>&1; then
            aws ecr create-repository \
              --repository-name "$IMAGE_NAME" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
            echo "Created ECR repository: $IMAGE_NAME"
          else
            echo "ECR repository already exists: $IMAGE_NAME"
          fi

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$ECR_REGISTRY"

      # Set up Docker Buildx (default driver, no QEMU)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          platforms: linux/amd64
          tags: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          build-args: |
            FRAPPE_REPO=${{ env.FRAPPE_REPO }}
            FRAPPE_BRANCH=${{ env.FRAPPE_BRANCH }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
            APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}

      # Optional: inspect the image manifest
      - name: Inspect pushed image
        run: |
          IMAGE=${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker inspect "$IMAGE"
