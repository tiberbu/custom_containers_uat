name: Build & Push Multi-Arch Image

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      image:
        description: "ECR repo name"
        required: false
        default: "my-app"
      version:
        description: "Image tag"
        required: false
        default: "latest"
      context:
        description: "Build context"
        required: false
        default: "."
      dockerfile:
        description: "Dockerfile path"
        required: false
        default: "Dockerfile"

permissions:
  contents: read

jobs:
  build:
    name: Build and push multi-arch
    runs-on: ubuntu-latest
    env:
      AWS_REGION: me-central-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare variables
        run: |
          echo "IMAGE_NAME=${{ github.event.inputs.image || 'my-app' }}" >> "$GITHUB_ENV"
          echo "IMAGE_TAG=${{ github.event.inputs.version || 'latest' }}" >> "$GITHUB_ENV"
          echo "CONTEXT_PATH=${{ github.event.inputs.context || '.' }}" >> "$GITHUB_ENV"
          echo "DOCKERFILE_PATH=${{ github.event.inputs.dockerfile || 'Dockerfile' }}" >> "$GITHUB_ENV"
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> "$GITHUB_ENV"

      - name: Set up QEMU
        uses: tonistiigi/setup-qemu-action@v2

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Ensure ECR repo exists
        run: |
          set -e
          aws ecr describe-repositories --repository-names "$IMAGE_NAME" --region "${{ env.AWS_REGION }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$IMAGE_NAME" --region "${{ env.AWS_REGION }}" --image-scanning-configuration scanOnPush=true

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.CONTEXT_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Inspect manifest
        run: |
          IMAGE=${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker buildx imagetools inspect --raw "$IMAGE" > /tmp/manifest.json
          if grep -q '"architecture": "amd64"' /tmp/manifest.json && grep -q '"architecture": "arm64"' /tmp/manifest.json; then
            echo "OK: image manifest contains amd64 and arm64"
          else
            echo "ERROR: manifest missing amd64/arm64"
            cat /tmp/manifest.json
            exit 1
          fi

      - name: Set output
        id: output
        run: echo "full_image=${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
