name: Build & Push Multi-Arch Image (amd64 + arm64)
on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      image:
        description: "Image name (ECR repository name)"
        required: true
        default: "my-app"
      version:
        description: "Image tag"
        required: true
        default: "latest"
      context:
        description: "Build context (path)"
        required: false
        default: "."
      dockerfile:
        description: "Dockerfile path (relative to context)"
        required: false
        default: "Dockerfile"
      # example build args you may want to supply
      FRAPPE_REPO:
        description: "Frappe repo (example build-arg)"
        required: false
      FRAPPE_BRANCH:
        description: "Frappe branch"
        required: false
      PY_VERSION:
        description: "Python version"
        required: false
      NODE_VERSION:
        description: "Node version"
        required: false
      APPS_JSON_BASE64:
        description: "apps.json base64 (example)"
        required: false

env:
  # Adjust AWS region if needed
  AWS_REGION: me-central-1
  # ECR registry will be computed from AWS_ACCOUNT_ID secret below
  # Make sure you set secrets.AWS_ACCOUNT_ID and AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY
  # in your repo or org secrets.
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

permissions:
  contents: read

jobs:
  build-and-push:
    name: Buildx multi-arch and push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for cross-platform builds)
        uses: tonistiigi/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Ensure ECR repository exists
        run: |
          set -e
          IMAGE_NAME="${{ github.event.inputs.image || github.inputs.image || 'my-app' }}"
          aws ecr describe-repositories --repository-names "$IMAGE_NAME" --region "${{ env.AWS_REGION }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$IMAGE_NAME" --region "${{ env.AWS_REGION }}" \
            --image-scanning-configuration scanOnPush=true --encryption-configuration encryptionType=AES256

      - name: Build and push multi-arch image (amd64 + arm64)
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.event.inputs.context || github.inputs.context || '.' }}
          file: ${{ github.event.inputs.dockerfile || github.inputs.dockerfile || 'Dockerfile' }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.ECR_REGISTRY }}/${{ github.event.inputs.image || github.inputs.image || 'my-app' }}:${{ github.event.inputs.version || github.inputs.version || 'latest' }}
          build-args: |
            FRAPPE_REPO=${{ github.event.inputs.FRAPPE_REPO || github.inputs.FRAPPE_REPO || '' }}
            FRAPPE_BRANCH=${{ github.event.inputs.FRAPPE_BRANCH || github.inputs.FRAPPE_BRANCH || '' }}
            PYTHON_VERSION=${{ github.event.inputs.PY_VERSION || github.inputs.PY_VERSION || '' }}
            NODE_VERSION=${{ github.event.inputs.NODE_VERSION || github.inputs.NODE_VERSION || '' }}
            APPS_JSON_BASE64=${{ github.event.inputs.APPS_JSON_BASE64 || github.inputs.APPS_JSON_BASE64 || '' }}
          # Optional: enable buildkit cache for faster incremental builds (requires additional setup)
          # cache-from: type=gha,scope=your-repo/your-image
          # cache-to: type=gha,mode=max,scope=your-repo/your-image

      - name: Verify pushed image supports amd64 and arm64
        run: |
          IMAGE="${{ env.ECR_REGISTRY }}/${{ github.event.inputs.image || github.inputs.image || 'my-app' }}:${{ github.event.inputs.version || github.inputs.version || 'latest' }}"
          echo "Inspecting image manifest for: $IMAGE"
          # imagetools is part of buildx; imagetools inspect prints platforms in manifest list
          docker buildx imagetools inspect --raw "$IMAGE" > manifest.json
          echo "Manifest saved to manifest.json"
          # Quick check for platform entries
          if grep -q '"architecture": "amd64"' manifest.json && grep -q '"architecture": "arm64"' manifest.json; then
            echo "SUCCESS: manifest contains both amd64 and arm64"
          else
            echo "ERROR: manifest does not contain both amd64 and arm64"
            cat manifest.json
            exit 2
          fi

      - name: Output pushed image (for later jobs)
        id: image
        run: |
          echo "::set-output name=full_image::${{ env.ECR_REGISTRY }}/${{ github.event.inputs.image || github.inputs.image || 'my-app' }}:${{ github.event.inputs.version || github.inputs.version || 'latest' }}"

